/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public class Tensor {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected Tensor(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Tensor obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        singa_wrapJNI.delete_Tensor(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public Tensor() {
    this(singa_wrapJNI.new_Tensor__SWIG_0(), true);
  }

  public Tensor(Shape shape, DataType dtype) {
    this(singa_wrapJNI.new_Tensor__SWIG_1(Shape.getCPtr(shape), shape, dtype.swigValue()), true);
  }

  public Tensor(Shape shape) {
    this(singa_wrapJNI.new_Tensor__SWIG_2(Shape.getCPtr(shape), shape), true);
  }

  public Tensor(Shape shape, Device dev, DataType dtype) {
    this(singa_wrapJNI.new_Tensor__SWIG_3(Shape.getCPtr(shape), shape, Device.getCPtr(dev), dev, dtype.swigValue()), true);
  }

  public Tensor(Shape shape, Device dev) {
    this(singa_wrapJNI.new_Tensor__SWIG_4(Shape.getCPtr(shape), shape, Device.getCPtr(dev), dev), true);
  }

  public Tensor(Tensor from) {
    this(singa_wrapJNI.new_Tensor__SWIG_5(Tensor.getCPtr(from), from), true);
  }

  public Device device() {
    long cPtr = singa_wrapJNI.Tensor_device(swigCPtr, this);
    return (cPtr == 0) ? null : new Device(cPtr, true);
  }

  public void floatGetValue(SWIGTYPE_p_float value, long num) {
    singa_wrapJNI.Tensor_floatGetValue(swigCPtr, this, SWIGTYPE_p_float.getCPtr(value), num);
  }

  public void intGetValue(SWIGTYPE_p_int value, long num) {
    singa_wrapJNI.Tensor_intGetValue(swigCPtr, this, SWIGTYPE_p_int.getCPtr(value), num);
  }

  public DataType data_type() {
    return DataType.swigToEnum(singa_wrapJNI.Tensor_data_type(swigCPtr, this));
  }

  public Shape shape() {
    return new Shape(singa_wrapJNI.Tensor_shape__SWIG_0(swigCPtr, this), false);
  }

  public long shape(long idx) {
    return singa_wrapJNI.Tensor_shape__SWIG_1(swigCPtr, this, idx);
  }

  public long nDim() {
    return singa_wrapJNI.Tensor_nDim(swigCPtr, this);
  }

  public boolean transpose() {
    return singa_wrapJNI.Tensor_transpose(swigCPtr, this);
  }

  public long Size() {
    return singa_wrapJNI.Tensor_Size(swigCPtr, this);
  }

  public long MemSize() {
    return singa_wrapJNI.Tensor_MemSize(swigCPtr, this);
  }

  public void Reshape(Shape shape) {
    singa_wrapJNI.Tensor_Reshape(swigCPtr, this, Shape.getCPtr(shape), shape);
  }

  public void ResetLike(Tensor t) {
    singa_wrapJNI.Tensor_ResetLike(swigCPtr, this, Tensor.getCPtr(t), t);
  }

  public void AsType(DataType type) {
    singa_wrapJNI.Tensor_AsType(swigCPtr, this, type.swigValue());
  }

  public void ToDevice(Device dev) {
    singa_wrapJNI.Tensor_ToDevice(swigCPtr, this, Device.getCPtr(dev), dev);
  }

  public void ToHost() {
    singa_wrapJNI.Tensor_ToHost(swigCPtr, this);
  }

  public float L2() {
    return singa_wrapJNI.Tensor_L2(swigCPtr, this);
  }

  public float L1() {
    return singa_wrapJNI.Tensor_L1(swigCPtr, this);
  }

  public void floatSetValue(float x) {
    singa_wrapJNI.Tensor_floatSetValue(swigCPtr, this, x);
  }

  public void floatCopyDataFromHostPtr(SWIGTYPE_p_float src, long num, long offset) {
    singa_wrapJNI.Tensor_floatCopyDataFromHostPtr__SWIG_0(swigCPtr, this, SWIGTYPE_p_float.getCPtr(src), num, offset);
  }

  public void floatCopyDataFromHostPtr(SWIGTYPE_p_float src, long num) {
    singa_wrapJNI.Tensor_floatCopyDataFromHostPtr__SWIG_1(swigCPtr, this, SWIGTYPE_p_float.getCPtr(src), num);
  }

  public void intCopyDataFromHostPtr(SWIGTYPE_p_int src, long num, long offset) {
    singa_wrapJNI.Tensor_intCopyDataFromHostPtr__SWIG_0(swigCPtr, this, SWIGTYPE_p_int.getCPtr(src), num, offset);
  }

  public void intCopyDataFromHostPtr(SWIGTYPE_p_int src, long num) {
    singa_wrapJNI.Tensor_intCopyDataFromHostPtr__SWIG_1(swigCPtr, this, SWIGTYPE_p_int.getCPtr(src), num);
  }

  public void CopyData(Tensor other) {
    singa_wrapJNI.Tensor_CopyData(swigCPtr, this, Tensor.getCPtr(other), other);
  }

  public Tensor Clone() {
    return new Tensor(singa_wrapJNI.Tensor_Clone(swigCPtr, this), true);
  }

  public Tensor T() {
    return new Tensor(singa_wrapJNI.Tensor_T(swigCPtr, this), true);
  }

  public Tensor iAdd_f(float x) {
    return new Tensor(singa_wrapJNI.Tensor_iAdd_f(swigCPtr, this, x), false);
  }

  public Tensor iSub_f(float x) {
    return new Tensor(singa_wrapJNI.Tensor_iSub_f(swigCPtr, this, x), false);
  }

  public Tensor iMul_f(float x) {
    return new Tensor(singa_wrapJNI.Tensor_iMul_f(swigCPtr, this, x), false);
  }

  public Tensor iDiv_f(float x) {
    return new Tensor(singa_wrapJNI.Tensor_iDiv_f(swigCPtr, this, x), false);
  }

}
